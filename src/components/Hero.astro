<section class="hero" id="home">
  <div class="hero-video">
    <video autoplay muted loop playsinline poster="/assets/2025-05-22_Address Advisors_2160693327782874.jpg">
      <source src="/assets/website video wo text.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
    <div class="video-overlay"></div>
  </div>
  
  <div class="hero-content">
    <div class="container">
      <div class="hero-text">
        <h1 class="hero-title">
          Solution to All Your<br/>
          Property Needs
        </h1>
        <p class="hero-subtitle">
          Get the features you need in all the property we offer with the best price you can get
        </p>
        
        <!-- Property Search Form -->
        <div class="property-search">
          <div class="search-fields">
            <div class="search-field">
              <label>Location</label>
              <input type="text" placeholder="Enter location" value="Bangalore, India">
            </div>
            <div class="search-field">
              <label>Price</label>
              <input type="text" placeholder="Price range" value="â‚¹ 70,00,000">
            </div>
            <div class="search-field">
              <label>Type</label>
              <div class="custom-select">
                <button type="button" class="select-button" id="propertyTypeSelect">
                  <span class="select-value">Residential</span>
                  <svg class="select-arrow" width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path stroke="rgba(255,255,255,0.8)" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/>
                  </svg>
                </button>
                <div class="select-dropdown" id="propertyTypeDropdown">
                  <div class="select-option" data-value="residential">Residential</div>
                  <div class="select-option" data-value="commercial">Commercial</div>
                  <div class="select-option" data-value="apartment">Apartment</div>
                  <div class="select-option" data-value="villa">Villa</div>
                </div>
              </div>
            </div>
            <button class="search-btn">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Statistics -->
        <div class="hero-stats">
          <div class="stat-item">
            <h3>15+</h3>
            <p>Cities</p>
          </div>
          <div class="stat-item">
            <h3>500+</h3>
            <p>Properties</p>
          </div>
          <div class="stat-item">
            <h3>1,000+</h3>
            <p>Happy Clients</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll indicator -->
  <div class="scroll-indicator">
    <div class="scroll-arrow"></div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    height: 100vh;
    min-height: 700px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    text-align: left;
    overflow: hidden;
    color: var(--text-white);
    padding-top: 10vh;
    width: 100%;
  }
  
  .hero-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
  }
  
  .hero-video video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(17, 24, 39, 0.8) 0%,
      rgba(17, 24, 39, 0.6) 40%,
      rgba(17, 24, 39, 0.4) 70%,
      transparent 100%
    );
    z-index: -1;
  }
  
  .hero-content {
    position: relative;
    z-index: 1;
    width: 100%;
    max-width: 1200px;
    padding: 0 var(--container-padding);
  }
  
  /* Container override for hero section */
  .hero .container {
    max-width: none;
    width: 100%;

  }
  
  .hero-text {
    max-width: 100%;
    margin-left: 25%;
  }
  
  .hero-title {
    font-size: clamp(2rem, 3vw, 3rem);
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }
  
  .hero-subtitle {
    font-size: clamp(1rem, 1.2vw, 1.125rem);
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 3rem;
    line-height: 1.6;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    max-width: 600px;
  }
  
  /* Property Search Form */
  .property-search {
    margin-bottom: 4rem;
    max-width: 700px;
  }
  
  .search-fields {
    display: flex;
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 0;
    padding: 0;
    gap: 0;
    align-items: stretch;
    backdrop-filter: blur(25px) saturate(180%);
    -webkit-backdrop-filter: blur(25px) saturate(180%);
    box-shadow: 
      0 8px 32px rgba(0, 0, 0, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.1),
      0 1px 0 rgba(255, 255, 255, 0.05);
    position: relative;
    overflow: hidden;
    width: 100%;
  }
  
  .search-fields::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, 
      rgba(255, 255, 255, 0.08) 0%, 
      rgba(255, 255, 255, 0.02) 50%, 
      rgba(255, 255, 255, 0.08) 100%);
    border-radius: 0;
    z-index: -1;
  }
  
  .search-field {
    flex: 1;
    display: flex;
    flex-direction: column;
    position: relative;
    min-width: 0;
    padding: 1.5rem 1.25rem;
    border-right: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .search-field:last-of-type {
    border-right: none;
  }
  
  .search-field label {
    font-size: 0.75rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }
  
  .search-field input,
  .search-field .select-button {
    padding: 0;
    border: none;
    border-radius: 0;
    font-size: 1rem;
    font-weight: 500;
    background: transparent;
    color: white;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 100%;
    height: auto;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  
  .search-field input::placeholder {
    color: rgba(255, 255, 255, 0.5);
    font-weight: 400;
  }
  
  .search-field input:focus,
  .search-field .select-button:focus {
    outline: none;
    background: transparent;
    color: rgba(255, 255, 255, 0.95);
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.1);
  }
  
  /* Custom Select Styling */
  .custom-select {
    position: relative;
    width: 100%;
  }
  
  .select-button {
    width: 100%;
    text-align: left;
    position: relative;
  }
  
  .select-value {
    flex: 1;
  }
  
  .select-arrow {
    transition: transform 0.3s ease;
    flex-shrink: 0;
  }
  
  .custom-select.open .select-arrow {
    transform: rotate(180deg);
  }
  
  .select-dropdown {
    position: fixed;
    background: transparent;
    backdrop-filter: blur(25px) saturate(180%);
    -webkit-backdrop-filter: blur(25px) saturate(180%);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 0;
    box-shadow: 
      0 20px 40px rgba(0, 0, 0, 0.4),
      0 8px 32px rgba(0, 0, 0, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), 
                visibility 0.3s linear 0.3s; /* Delay visibility transition until opacity is 0 */
    z-index: 9999;
    overflow-y: auto;
    min-width: 200px; /* Ensure a minimum width */
    max-height: 200px; /* Consistent with JS logic */
  }
  
  .select-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    transition-delay: 0s, 0s, 0s; /* Remove delay when becoming active */
  }
  
  .select-option {
    padding: 1rem 1.25rem;
    color: rgba(255, 255, 255, 0.9);
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    position: relative;
    overflow: hidden;
  }
  
  .select-option:last-child {
    border-bottom: none;
  }
  
  .select-option::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.1), 
      transparent);
    transition: left 0.5s ease;
  }
  
  .select-option:hover {
    background: rgba(30, 41, 59, 0.6);
    backdrop-filter: blur(30px) saturate(200%);
    -webkit-backdrop-filter: blur(30px) saturate(200%);
    color: rgba(255, 255, 255, 0.95);
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
  }
  
  .select-option:hover::before {
    left: 100%;
  }
  
  .select-option.selected {
    background: rgba(220, 38, 38, 0.2);
    backdrop-filter: blur(30px) saturate(200%);
    -webkit-backdrop-filter: blur(30px) saturate(200%);
    color: rgba(255, 255, 255, 0.98);
    font-weight: 500;
    box-shadow: 
      inset 0 1px 0 rgba(255, 255, 255, 0.15),
      0 0 0 1px rgba(220, 38, 38, 0.3);
  }
  
  .select-option:active {
    transform: scale(0.98);
  }
  
  .search-btn {
    background: linear-gradient(135deg, 
      rgba(220, 38, 38, 1) 0%, 
      rgba(185, 28, 28, 1) 100%);
    border: none;
    color: white;
    border-radius: 0;
    padding: 1.5rem 1.75rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    position: relative;
    overflow: hidden;
  }
  
  .search-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.15), 
      transparent);
    transition: left 0.5s;
  }
  
  .search-btn:hover::before {
    left: 100%;
  }
  
  .search-btn:hover {
    background: linear-gradient(135deg, 
      rgba(185, 28, 28, 1) 0%, 
      rgba(153, 27, 27, 1) 100%);
  }
  
  .search-btn:active {
    background: linear-gradient(135deg, 
      rgba(153, 27, 27, 1) 0%, 
      rgba(127, 29, 29, 1) 100%);
  }
  
  .search-btn svg {
    width: 20px;
    height: 20px;
  }
  
  /* Statistics */
  .hero-stats {
    display: flex;
    gap: 3rem;
    max-width: 600px;
    justify-content: flex-start;
  }
  
  .stat-item {
    text-align: left;
    flex-shrink: 0;
  }
  
  .stat-item h3 {
    font-size: clamp(1.75rem, 2.5vw, 2.5rem);
    font-weight: 700;
    color: white;
    margin: 0 0 0.5rem 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }
  
  .stat-item p {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.8);
    margin: 0;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }
  
  .scroll-indicator {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    animation: bounce 2s infinite;
    opacity: 0.8;
  }
  
  .scroll-arrow {
    width: 20px;
    height: 20px;
    border-right: 3px solid var(--text-white);
    border-bottom: 3px solid var(--text-white);
    transform: rotate(45deg);
  }
  
  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateX(-50%) translateY(0);
    }
    40% {
      transform: translateX(-50%) translateY(-12px);
    }
    60% {
      transform: translateX(-50%) translateY(-6px);
    }
  }
  
  /* Responsive Design */
  @media (max-width: 1024px) {
    .hero .container {
      width: 90%;
      margin-left: -0.25rem;
    }
    
    .search-fields {
      flex-direction: column;
    }
    
    .search-field {
      border-right: none;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      padding: 1.25rem 1.5rem;
    }
    
    .search-field:last-of-type {
      border-bottom: none;
    }
    
    .search-btn {
      padding: 1.25rem 1.5rem;
      justify-content: center;
    }
  }

  @media (max-width: 768px) {
    .hero {
      min-height: 600px;
      padding-top: 15vh;
    }
    
    .hero .container {
      width: 95%;
      padding: 0 1rem;
      margin-left: 0;
    }
    
    .hero-title {
      font-size: clamp(1.75rem, 5vw, 2.25rem);
      margin-bottom: 1rem;
    }
    
    .hero-subtitle {
      font-size: 1rem;
      margin-bottom: 2rem;
    }
    
    .property-search {
      max-width: 100%;
    }
    
    .search-fields {
      flex-direction: column;
    }
    
    .search-field {
      padding: 1rem 1.25rem;
      border-right: none;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .search-field:last-of-type {
      border-bottom: none;
    }
    
    .search-field input,
    .search-field .select-button {
      font-size: 0.95rem;
    }
    
    .search-btn {
      padding: 1rem 1.25rem;
    }
    
    .hero-stats {
      gap: 2rem;
      flex-wrap: wrap;
      max-width: 100%;
    }
    
    .stat-item h3 {
      font-size: clamp(1.5rem, 3.5vw, 1.875rem);
    }
    
    /* Custom dropdown mobile adjustments */
    .select-dropdown {
      border-radius: 8px;
      backdrop-filter: blur(20px) saturate(150%);
      -webkit-backdrop-filter: blur(20px) saturate(150%);
    }
    
    .select-option {
      padding: 0.875rem 1rem;
      font-size: 0.95rem;
    }
  }
  
  @media (max-width: 480px) {
    .hero {
      min-height: 550px;
      padding-top: 12vh;
    }

    .hero-title {
      font-size: clamp(1.5rem, 6vw, 1.875rem);
      margin-bottom: 1rem;
    }
    
    .hero-subtitle {
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }
    
    .property-search {
      margin-bottom: 2rem;
    }
    
    .search-field {
      padding: 0.875rem 1rem;
    }
    
    .search-field input,
    .search-field .select-button {
      font-size: 0.9rem;
    }
    
    .search-btn {
      padding: 0.875rem 1rem;
    }
    
    .hero-stats {
      gap: 1.5rem;
      justify-content: flex-start;
    }
    
    .stat-item h3 {
      font-size: 1.25rem;
    }
    
    .stat-item p {
      font-size: 0.875rem;
    }
    
    .scroll-indicator {
      bottom: 2rem;
    }
  }

  .service-card:nth-child(6) { animation-delay: 0.6s; }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const customSelect = document.querySelector('.custom-select');
    const selectButton = document.getElementById('propertyTypeSelect');
    const selectDropdown = document.getElementById('propertyTypeDropdown');
    const selectValue = document.querySelector('.select-value');
    const selectOptions = document.querySelectorAll('.select-option');
    
    if (!customSelect || !selectButton || !selectDropdown || !selectValue) {
      console.error('Custom select elements not found!');
      return;
    }
    
    const originalParent = selectDropdown.parentNode;
    if (!originalParent) {
      console.error('Dropdown has no original parent!');
      return;
    }

    // Function to position dropdown
    function positionDropdown() {
      if (!selectButton || !selectDropdown) return;
      
      const buttonRect = selectButton.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      const viewportWidth = window.innerWidth;
      
      let top = buttonRect.bottom + 8;
      let left = buttonRect.left;
      let width = Math.max(buttonRect.width, 200); // Ensure min width
      
      // Attempt to get dropdown height, might be 0 if not fully rendered
      const dropdownHeight = selectDropdown.offsetHeight || 200; // Fallback height

      if (left + width > viewportWidth - 10) { // 10px buffer from edge
        left = viewportWidth - width - 10;
      }
      if (left < 10) {
        left = 10;
      }
      
      if (top + dropdownHeight > viewportHeight - 10) { 
        top = buttonRect.top - dropdownHeight - 8;
        if (top < 10) { // If still off-screen above, position below with scroll
            top = buttonRect.bottom + 8;
        }
      }
      if (top < 10 && buttonRect.bottom + 8 + dropdownHeight <= viewportHeight -10) { // Check again if it can go below
          top = buttonRect.bottom + 8;
      }
      
      selectDropdown.style.top = `${top}px`;
      selectDropdown.style.left = `${left}px`;
      selectDropdown.style.width = `${width}px`;
    }

    function openDropdown() {
      if (!selectDropdown || !customSelect) return;
      if (selectDropdown.parentNode !== document.body) {
        document.body.appendChild(selectDropdown);
      }
      positionDropdown();
      selectDropdown.classList.add('active');
      customSelect.classList.add('open'); // For button arrow styling
    }

    function closeDropdown() {
      if (!selectDropdown || !customSelect || !originalParent) return;
      selectDropdown.classList.remove('active');
      customSelect.classList.remove('open'); // For button arrow styling
      // Move back to original parent to maintain DOM structure and prevent memory leaks
      if (selectDropdown.parentNode === document.body) {
        originalParent.appendChild(selectDropdown);
      }
    }

    selectButton.addEventListener('click', function(e) {
      e.preventDefault();
      if (selectDropdown.classList.contains('active')) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    document.addEventListener('click', function(e) {
      if (!selectButton || !selectDropdown) return;
      // If click is outside the button AND outside the dropdown itself
      if (!selectButton.contains(e.target as Node) && !selectDropdown.contains(e.target as Node)) {
        if (selectDropdown.classList.contains('active')) {
          closeDropdown();
        }
      }
    });

    selectOptions.forEach(option => {
      option.addEventListener('click', function(this: HTMLElement) {
        if (!selectValue || !selectButton || !selectDropdown) return;
        const value = this.getAttribute('data-value');
        const text = this.textContent;
        if (!value || !text) return;
        selectValue.textContent = text;
        selectOptions.forEach(opt => opt.classList.remove('selected'));
        this.classList.add('selected');
        selectButton.setAttribute('data-value', value);
        closeDropdown();
      });
    });

    selectButton.addEventListener('keydown', function(e) {
      if (!selectDropdown) return;
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        if (selectDropdown.classList.contains('active')) closeDropdown(); else openDropdown();
      } else if (e.key === 'Escape') {
        if (selectDropdown.classList.contains('active')) closeDropdown();
      }
    });

    window.addEventListener('resize', function() {
      if (selectDropdown && selectDropdown.classList.contains('active')) positionDropdown();
    });
    // Use capture: true for scroll to catch it earlier in event phase
    window.addEventListener('scroll', function() {
      if (selectDropdown && selectDropdown.classList.contains('active')) positionDropdown();
    }, true);

    const firstOption = selectOptions[0];
    if (firstOption) {
      firstOption.classList.add('selected');
    }
  });
</script> 