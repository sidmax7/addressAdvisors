---
export interface Props {
  title: string;
  description?: string;
  keywords?: string;
}

const { title, description = "Address Advisors - The only real estate consultants you'll ever need", keywords = "real estate, property consultants, commercial property, residential property, India" } = Astro.props;

import '../styles/global.css';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/assets/faviocn.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/assets/Address Advisors - indian property consultants.png" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/assets/Address Advisors - indian property consultants.png" />
    
    <title>{title}</title>
    
    <!-- Preload critical fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet" />
  </head>
  <body>
    <slot />
    
    <!-- Global scripts -->
    <script>
      // Smooth scroll behavior for anchor links
      document.addEventListener('DOMContentLoaded', function() {
        // Intersection Observer for scroll animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('visible');
            }
          });
        }, observerOptions);

        // Observe all fade-in elements
        const fadeElements = document.querySelectorAll('.fade-in, .fade-in-left, .fade-in-right');
        fadeElements.forEach(el => observer.observe(el));

        // Enhanced smooth scrolling for navigation links
        const navLinks = document.querySelectorAll('a[href^="#"]');
        navLinks.forEach(link => {
          link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
            
            if (targetId) {
              const targetElement = document.querySelector(targetId);
              
              if (targetElement) {
                const headerHeight = 100;
                const targetPosition = (targetElement as HTMLElement).offsetTop - headerHeight;
                
                window.scrollTo({
                  top: targetPosition,
                  behavior: 'smooth'
                });
              }
            }
          });
        });

        // Parallax effect for hero section
        const hero = document.querySelector('.hero');
        if (hero) {
          window.addEventListener('scroll', () => {
            const scrolled = window.pageYOffset;
            const parallax = scrolled * 0.5;
            (hero as HTMLElement).style.transform = `translateY(${parallax}px)`;
          });
        }

        // Add scroll progress indicator
        const progressBar = document.createElement('div');
        progressBar.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 0%;
          height: 3px;
          background: linear-gradient(90deg, #dc2626, #1D184B);
          z-index: 9999;
          transition: width 0.3s ease;
        `;
        document.body.appendChild(progressBar);

        window.addEventListener('scroll', () => {
          const scrollTop = document.documentElement.scrollTop;
          const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
          const scrollProgress = (scrollTop / scrollHeight) * 100;
          progressBar.style.width = scrollProgress + '%';
        });
      });
    </script>
  </body>
</html>

<style>
  body {
    font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  }
</style> 